rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    //match /{document=**} { // **은 하위 경로까지 적용하겠다는 뜻
    	//allow read : if true;
      //allow write: if request.auth != null ;
    //} 규칙 중복 발생 시 관대하게 적용한다 (주로 가능하게)
    
    match /product/{docid} { // product 안에 있는 모든 요소
    allow read : if true ;
    allow write : if request.auth != null && request.resource.data.keys().hasOnly(['제목', '내용', '가격', '날짜', '이미지', 'uid', '닉네임'])
    && request.resource.data.title.size() > 0 && request.resource.data.title is string; // 로그인 된 유저만 작성 가능
    allow update : if request.auth.uid == resource.data.uid || checkadmin() ;
    // wirte = update + create + delete
    } // match
    
    match /user/{docid} {
    allow read, write : if true ;
  } // match
  
  function checkadmin(){
  	return get(/databases/$(database)/documents/user/$(request.auth.uid)).data.role == 'admin';
  } // exists 를 사용하면 존재유무를 확인할 수 있다.
  
  match /chatroom/{docid}{
  allow read, write : if true ;
  } // match
  match /chatroom/{docid}/messages/{docid2}{
  allow read, write : if true;
  }
 } // documents   
} // firestore